class Node{
  constructor(value){
    this.value = value;
    this.next = null;
  }
}

class LinkedList{
  constructor(){
    this.head=null;
    this.tail = null;
    this.length = 0;
  }
  push(value){
    let newNode = new Node(value);
    if(this.head==null){
      this.head = newNode;
      this.tail = newNode;
      this.length = 1;
    }
    else{
      this.tail.next = newNode;
      this.tail = newNode
      this.length++;
      }
  }
  pop(){
    let popitem;
    if(this.head==this.tail)
    {
      popitem = this.head
      this.head=null;
      this.tail = null;
      this.length=0;
      
    }
    else{
      let current = this.head;
      
      while(current){
        if(current.next!=this.tail){
          current = current.next;
        }
        else{
          this.length--;
          popitem = current.next;
          current.next = null;
          this.tail = current;
        }
      }
    }
    return popitem;
  }

  Shift(){
    let popItem;
    if(!this.head) return undefined;
    if(this.head.next==null){
       popItem = this.head;
       this.head=null;
       this.tail=null;
    }
    else{
      let current = this.head;
      popItem= this.head;
      this.head = current.next;
      this.length--;
    }
    return popItem;
  }
  UnShift(value){
    let newNode = new Node(value)
    if(!this.head){
      this.head = newNode;
      this.tail = newNode;
    };
    if(this.head.next==null){
      newNode.next = this.head;
      this.tail=this.head;
      this.head = newNode;
      this.length++;
    }
    else{
       newNode.next = this.head;
      this.head = newNode;
      this.length++;
    }
    return this;
  }
  get(value){
   let current; 
   if(!this.head) return undefined;
   if(value === 1){
      return this.head
    }
    if(this.length===value){
      return this.tail;
    }
    if(this.length<value){
     return undefined;
    }
    else{
       current = this.head;
      for(let i=1;i<value;i++){
        //.log(current)
        current = current.next
      }
    }
   return current;
  }

}
let list = new LinkedList();
list.push(10);
list.push(12);
list.push(13);
list.push(16);
list.push(19);
list.UnShift(5)
list.pop();

console.log(list.get(4))

