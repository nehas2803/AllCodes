// function charCode(str){
//   let obj = {

//   }
//   let l = Object.keys(obj);
//   let char =str.split('');

//   for(let i=0;i<char.length;i++){
//     l = Object.keys(obj);
//     if(l.indexOf(char[i])==-1){
     
//    obj[char[i]]=1
   
//  }
//  else{
//    let p=0;
//  obj[char[i]]++;
  
  
// }
//   }

//   return obj;
// }
// console.log(charCode('Hi hello my name is kareena 12345 @'))
class PriorityQueue {
   constructor(maxSize) {
      // Set default max size if not provided
      if (isNaN(maxSize)) {
         maxSize = 10;
       }
      this.maxSize = maxSize;
      // Init an array that'll contain the queue values.
      this.container = [];
   }
   // Helper function to display all values while developing
   display() {
      console.log(this.container);
   }
   // Checks if queue is empty
   isEmpty() {
      return this.container.length === 0;
   }
   // checks if queue is full
   isFull() {
      return this.container.length >= this.maxSize;
   }
   enqueue(data, priority) {
      // Check if Queue is full
      if (this.isFull()) {
         console.log("Queue Overflow!");
         return;
      }
      let currElem = new this.Element(data, priority);
      let addedFlag = false;
      // Since we want to add elements to end, we'll just push them.
      for (let i = 0; i < this.container.length; i++) {
         if (currElem.priority < this.container[i].priority) {
            this.container.splice(i, 0, currElem);
            addedFlag = true; break;
         }
      }
      if (!addedFlag) {
         this.container.push(currElem);
      }
   }
   dequeue() {
   // Check if empty
   if (this.isEmpty()) {
      console.log("Queue Underflow!");
      return;
   }
   return this.container.pop();
}
peek() {
   if (isEmpty()) {
      console.log("Queue Underflow!");
      return;
   }
   return this.container[this.container.length - 1];
}
clear() {
   this.container = [];
   }
}
// Create an inner class that we'll use to create new nodes in the queue
// Each element has some data and a priority
PriorityQueue.prototype.Element = class {
   constructor(data, priority) {
      this.data = data;
      this.priority = priority;
   }
};

class Graph {
   constructor() {
      this.edges = {};
      this.nodes = [];
   }

   addNode(node) {
      this.nodes.push(node);
      this.edges[node] = [];
   }

   addEdge(node1, node2, weight) {
      this.edges[node1].push({ node: node2, weight: weight });
      
   }

   addDirectedEdge(node1, node2, weight = 1) {
      this.edges[node1].push({ node: node2, weight: weight });
   }

   // addEdge(node1, node2) {
      //   this.edges[node1].push(node2);
      //   this.edges[node2].push(node1);
   // }

   // addDirectedEdge(node1, node2) {
      //   this.edges[node1].push(node2);
   // }
djikstraAlgorithm(startNode) {
      let distances = {obj:0,arr:[]};
      let arr=[];

      // Stores the reference to previous nodes
      let prev = {};
      console.log(this.nodes.length)
      let pq = new PriorityQueue(this.nodes.length * this.nodes.length);

      // Set distances to all nodes to be infinite except startNode
      distances[startNode] = 0;
      pq.enqueue(startNode, 0);

      this.nodes.forEach(node => {
         if (node !== startNode) distances[node] = Infinity;
         prev[node] = null;
      });

      while (!pq.isEmpty()) {
         let minNode = pq.dequeue();
         let currNode = minNode.data;
         let weight = minNode.priority;

         this.edges[currNode].forEach(neighbor => {
           distances.arr=[];
            let alt = distances[currNode] + neighbor.weight;
            if (alt < distances[neighbor.node]) {
               distances[neighbor.node] = alt;
               prev[neighbor.node] = currNode;
               arr.push(neighbor.node);
               distances.arr.push(neighbor.node)
               pq.enqueue(neighbor.node, distances.obj[neighbor.node]);
            }
         });
      }
      return {distances:distances,arr:arr};
   }
   display() {
      let graph = "";
      this.nodes.forEach(node => {
         graph += node + "->" + this.edges[node].map(n => n.node).join(", ") + "\n";
      });
      console.log(graph);
   }
   }

   let g = new Graph();
   g.addNode('A');
   g.addNode('B');
   g.addNode('C');
   g.addNode('D');
   g.addEdge('A','D',2)
   g.addEdge('B','A',2)
   g.addEdge('B','D',2)
   g.addEdge('C','B',2)
   g.addEdge('D','C',2)
   g.display();
   console.log(g.djikstraAlgorithm('A'))