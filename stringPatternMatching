//Brute force pattern matching O(n*m)
function search(pattern, text) {
        var M = pattern.length;
        var N = text.length;
        for (var i = 0; i <= N - M; ++i) {
            var matched = true;
            for (var j = 0; j < M; ++j) {
                if (text.charAt(i + j) != pattern.charAt(j)) {
                  console.log(text.charAt(i+j))
                    matched = false;
                    break;
                }
            }
            if (matched) {
                return i;
            }
        }
        return -1;
    }
    //
    
    //rabinKarp pattern matching also with hash O(m+n)
    function rabinKarp(text, pattern) {
    if(pattern.length > text.length) {
        return -1;
    }
    if(!pattern){
        return 0;
    }
    var R = 256;
    var Q = 999991;
    var M = pattern.length;
    var RM = 1;
    
    for(var a = 1; a <= M-1; a++) {
        RM = (R*RM)%Q;
    }
    var phash = hash(pattern, M, Q, R);
    var hashy = hash(text, M, Q, R);
    if(phash === hashy) return 0;
    
    for(var i = 1; i+M-1 <= text.length-1; i++) {
        var nextHash = (hashy + Q - text.charCodeAt(i-1)*RM%Q) % Q;
        nextHash = (nextHash*R%Q+text.charCodeAt(i+M-1))%Q;
        if(nextHash === phash) {
            return i;
        }
        hashy = nextHash;
    }
    return -1;
};

var hash = function(str, len, Q, R) {
    var h = 0;
    for(var i = 0; i < len; i++) {
        h = (h*R+str.charCodeAt(i))%Q;
    }
    return h;
};
//
Knuth morris prath algo(create a lookup table for the pattern O(m+n)
function kmp_search(s, w) {  
    var m = 0, i = 0,   
        pos, cnd, t,  
        slen = s.length,  
        wlen = w.length;  
      
    /* String to array conversion */  
    s = s.split("");  
    w = w.split("");      
             console.log(w)
    /* Construct the lookup table */  
    t = [-1, 0];  
    for ( pos = 2, cnd = 0; pos < wlen; ) { 
      console.log(pos) 
        if ( w[pos-1] === w[cnd] ) {  
            t[pos] = cnd + 1;  
            pos++; cnd++;  
        }  
        else if ( cnd > 0 )  
          cnd = t[cnd];  
        else  { 
          
          t[pos++] = 0;
         }  
    }   
      
      console.log(t)
    /* Perform the search */ 
    console.log(s) 
    console.log(w)
    while ( m + i < slen ) {  
      console.log(s[m+i],w[i])
      
        if ( s[m+i] === w[i] ) {  
            i++; //i=1 
            if ( i === wlen )   
              return m;  
        }  
        else {  
            m += i - t[i];  //m=m+i-t[i] = 0+1-0=1
            if ( t[i] > -1 )  
                i = t[i];  
            else  
                i = 0;  
        }  
    }  
    return -1;  
}  
console.log(kmp_search('aabbbccabc','ababc'));

//

    
    
